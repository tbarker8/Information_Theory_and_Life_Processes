import matplotlib.pyplot as plt
import math

noise_array = [0.0,0.01, 0.02, 0.03, 0.04, 0.05,0.06, 0.07, 0.08, 0.09, 0.1,0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0,2.2,2.4,2.6,2.8,3.0,3.2,3.4,3.6,3.8,4.0]

max_vars = [[[1.8233443428940635e-13, 1.8233443428940635e-13]], [[8.388988428651506e-14, 1.044039406899115e-13]], [[1.7511440326474727e-13, 1.1838558807099733e-13]], [[2.1201678405744926e-13, 1.9792053300930533e-13]], [[2.7877342011878125e-13, 3.270215639502332e-13]], [[2.305252762873293e-13, 3.140713495726701e-13]], [[3.075962423838885e-13, 3.7028444826465864e-13]], [[3.2925633545786576e-13, 3.081692607191789e-13]], [[3.5303659637241753e-13, 3.689092042599617e-13]], [[3.9102771200217126e-13, 3.4885356252479756e-13]], [[2.7802849628290374e-13, 4.2483579378430505e-13]], [[3.84953717648093e-13, 3.968151971886043e-13]], [[3.541826330429983e-13, 2.7751277978114234e-13]], [[3.5704772471945034e-13, 2.3585434680553004e-13]], [[1.9459702666462098e-13, 3.283968079549302e-13]], [[3.5349501104064984e-13, 2.1734585457565e-13]], [[2.8375867963580776e-13, 2.89832673989886e-13]], [[2.497213905195578e-13, 2.6714114791238603e-13]], [[3.1412865140619914e-13, 2.660524130753343e-13]], [[2.9069220149282165e-13, 2.7183989826176736e-13]], [[2.7848691095113605e-13, 2.7779928894878754e-13]], [[2.0559897870219672e-13, 1.627945090560036e-13]], [[7.042395340719058e-14, 1.0480505352461478e-13]], [[8.520782645768298e-14, 9.769962616701378e-14]], [[1.0234107468286604e-13, 7.403396891952012e-14]], [[4.945148233556181e-14, 4.7159408994400195e-14]], [[6.326122421606053e-14, 4.039779263797344e-14]], [[4.9967198837323174e-14, 3.701698445976006e-14]], [[5.131379192525562e-14, 4.933687866850373e-14]], [[5.747373902962745e-14, 2.7390276426881282e-14]], [[5.245982859583643e-14, 2.733297459335224e-14]], [[4.3520742565306136e-14, 3.088568827215274e-14]], [[4.735996541175184e-14, 3.890794496621839e-14]], [[4.5383052154999945e-14, 2.2949384328380656e-14]], [[4.1257320140909044e-14, 2.7820040178349085e-14]], [[2.893742593216537e-14, 3.4323798283895165e-14]], [[3.062783002127206e-14, 2.4066770082196942e-14]], [[3.9194454133863594e-14, 3.412324186654352e-14]], [[2.220446049250313e-14, 2.380891183131626e-14]], [[2.6043683338948835e-14, 2.4811693918074465e-14]], [[1.839388856282195e-14, 2.890877501540085e-14]], [[2.0972471071628764e-14, 2.0915169238099722e-14]], [[2.96823497680429e-14, 2.217580957573861e-14]], [[1.4927127634315007e-14, 3.0026160769217135e-14]], [[2.564257050424555e-14, 2.1488187573390128e-14]], [[1.9668854358843095e-14, 1.6073164304895815e-14]], [[1.872337410561393e-14, 2.005564173516412e-14]], [[2.6745630799679578e-14, 2.4095420998961462e-14]]]
#full measured full vars
measured_vars = [[[1.943364305912587, 1.943364305912587]], [[2.6019112092869117, 2.5758430297934356]], [[2.6510875258429536, 2.593896706550065]], [[2.5327879704517264, 2.659987053745455]], [[2.6915184583205063, 2.660548134287341]], [[2.6369488037673054, 2.657891781014002]], [[2.642113735126665, 2.5785797668433066]], [[2.5570762850360285, 2.5897020807248876]], [[2.621208506092705, 2.6468320796764604]], [[2.60597352521842, 2.5770753974324525]], [[2.608897392759941, 2.5846270091540355]], [[2.621962573693543, 2.5732061974951534]], [[2.5252647788881535, 2.5705978264489624]], [[2.4848420652694956, 2.5801580081858106]], [[2.5047350015820204, 2.554285864127442]], [[2.5991355154449236, 2.539215199687725]], [[2.5091767993226086, 2.531116698709568]], [[2.489100641249511, 2.4576038429484366]], [[2.490806406593958, 2.543635814810843]], [[2.5293850109120646, 2.501601412087927]], [[2.465363212600367, 2.407155425931742]], [[2.413661499474211, 2.366444623745135]], [[2.36463866934073, 2.3520671362375785]], [[2.3917888866891417, 2.436046221151007]], [[2.246547067835113, 2.290543415897501]], [[2.2393068710224227, 2.321082890911815]], [[2.2971559066895413, 2.2962512569979494]], [[2.2740842605295066, 2.262052430337434]], [[2.194670287536093, 2.321864520932823]], [[2.339287575858526, 2.2855101878113966]], [[2.3067975200227293, 2.253118415619439]], [[2.2492199254588163, 2.2723094090789293]], [[2.2577679307915917, 2.2768086129346807]], [[2.2397847519651375, 2.243202813140301]], [[2.258416680872432, 2.2036307284825174]], [[2.2737932421866045, 2.2644206204840676]], [[2.240657238829808, 2.2796561172269496]], [[2.3049530106049714, 2.258616721459223]], [[2.2855897818632425, 2.1496648954094724]], [[2.290202270920987, 2.217454038224937]], [[2.1658209603606777, 2.2273301022564067]], [[2.2171053268104717, 2.233257579807713]], [[2.2317362910112357, 2.2917440296974614]], [[2.242158408266214, 2.254232078753432]], [[2.327188500618471, 2.290019051168252]], [[2.3351074364650457, 2.132234102890182]], [[2.271848394199127, 2.226622016052837]], [[2.1932118082146754, 2.2063300471407903]]]

#print(len(max_vars))
max_vars_full = []
measured_vars_full = []
for i in range(len(max_vars)):
    sum_max = 0.0
    sum_measured = 0.0
    for j in range(len(max_vars[i][0])):
        sum_max = sum_max + max_vars[i][0][j]
        sum_measured = sum_measured + measured_vars[i][0][j]
    max_vars_full.append(sum_max/len(max_vars[i][0]))
    measured_vars_full.append(sum_measured/len(measured_vars[i][0]))

plt.grid()
plt.plot(noise_array, max_vars_full, marker = 'o', label = "Equal Receptor Strategy")
plt.plot(noise_array, measured_vars_full, marker = '^', label = "Adaptive Receptor Strategy")
plt.xlabel("Noise Factor ($\gamma$)")
plt.ylabel("$SI$ [bits]")
#plt.show()
plt.clf()

cell_stress_array = [0.2, 0.25, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]
#full max full vars
max_vars = [[[6.572520305780927e-13, 6.791986328197152e-13], [5.783760567253687e-13, 6.545874953189923e-13], [6.477685771290365e-13, 5.747946921298036e-13], [5.248847951260095e-13, 5.91612780270577e-13], [5.837624290770984e-13, 5.663140207675057e-13], [4.4724081069415985e-13, 5.101868748258106e-13], [2.9281236933339613e-13, 4.891857528374173e-13], [2.6765686441414743e-13, 2.4232945399431157e-13], [5.973716145402456e-14, 1.1709629681659393e-13], [3.234688502714327e-14, 4.936552958526825e-14]]]
#full measured full vars
measured_vars = [[[1.7665509886674504, 1.7393342517288417], [1.901592649202301, 1.8595673672849402], [1.8518851813460098, 1.842533865993164], [1.923277989546704, 1.9331391342361672], [1.914520539739702, 1.9141214934168511], [1.889858500472846, 1.9046232994348162], [2.0498938040182644, 1.9907469603276773], [2.13181333900069, 2.121099709564849], [2.229803624952841, 2.1672522604423095], [2.2638036279947418, 2.2914342235845653]]]


max_vars_full = []
measured_vars_full = []
for i in range(len(max_vars[0])):
    sum_max = 0.0
    sum_measured = 0.0
    for j in range(len(max_vars[0][i])):
        sum_max = sum_max + max_vars[0][i][j]
        sum_measured = sum_measured + measured_vars[0][i][j]
    max_vars_full.append(sum_max / len(max_vars[0][i]))
    measured_vars_full.append(sum_measured / len(max_vars[0][i]))

plt.grid()
plt.plot(cell_stress_array, max_vars_full, marker = 'o', label = "Equal Receptor Strategy")
plt.plot(cell_stress_array, measured_vars_full, marker = '^', label = "Adaptive Receptor Strategy")
plt.legend()
plt.xlabel("Cell Stress")
plt.ylabel("$SI$ [bits]")
#plt.show()
plt.clf()

concA = [3.0193914059633284, 3.3362303992857503, 3.6841384456884483, 4.064331455336997, 4.477619977269358, 4.92429766486471, 5.404024822636188, 5.915711843352125, 6.457408586357567, 7.026206851610442, 7.618163929926248, 8.228255608962684, 8.850366842894768, 9.477327432663174, 10.100998440165025, 10.71241266697646, 11.301969441438631, 11.859680342752828, 12.375458600192397, 12.83944106473718, 13.242328228098925, 13.575725133513947, 13.832464516201075, 14.006893374788165, 14.095105528570418, 14.095105528570418, 14.006893374788165, 13.832464516201078, 13.575725133513947, 13.242328228098925, 12.83944106473718, 12.375458600192397, 11.85968034275283, 11.301969441438638, 10.71241266697646, 10.100998440165025, 9.477327432663175, 8.850366842894772, 8.228255608962685, 7.618163929926248, 7.026206851610442, 6.457408586357568, 5.915711843352126, 5.404024822636189, 4.924297664864714, 4.477619977269358, 4.064331455336998, 3.684138445688449, 3.3362303992857516, 3.0193914059633307, 2.732103262521832, 2.4726377149578376, 2.2391365668456213, 2.0296792231918994, 1.842337927948401, 1.6752214574521322, 1.5265083677092788, 1.3944710847153696, 1.2774922015142265, 1.174074331326015, 1.0828447887104815, 1.0025562528802823, 0.9320844274026304, 0.8704235629373742, 0.8166805647905857, 0.7700682719676376, 0.7298983733593192, 0.6955743217905316, 0.6665845184060127, 0.6424959676569579, 0.622948545676327, 0.6076499803828561, 0.5963716083566262, 0.5889449494854568, 0.5852591237675872, 0.5852591237675872, 0.5889449494854568, 0.5963716083566261, 0.6076499803828563, 0.6229485456763268, 0.6424959676569579, 0.6665845184060127, 0.6955743217905315, 0.7298983733593197, 0.7700682719676377, 0.8166805647905855, 0.8704235629373743, 0.9320844274026302, 1.002556252880283, 1.0828447887104813, 1.1740743313260145, 1.277492201514227, 1.3944710847153692, 1.52650836770928, 1.6752214574521322, 1.842337927948403, 2.0296792231919, 2.2391365668456205, 2.4726377149578393, 2.7321032625218318]
concB = [3.019391405963332, 2.73210326252183, 2.472637714957838, 2.239136566845619, 2.029679223191899, 1.8423379279484018, 1.6752214574521316, 1.526508367709279, 1.3944710847153683, 1.2774922015142263, 1.1740743313260138, 1.0828447887104806, 1.0025562528802825, 0.9320844274026296, 0.8704235629373739, 0.8166805647905849, 0.7700682719676373, 0.7298983733593194, 0.695574321790531, 0.6665845184060124, 0.6424959676569576, 0.6229485456763265, 0.607649980382856, 0.5963716083566257, 0.5889449494854565, 0.5852591237675868, 0.5852591237675868, 0.5889449494854565, 0.5963716083566258, 0.6076499803828558, 0.6229485456763266, 0.6424959676569576, 0.6665845184060123, 0.6955743217905312, 0.7298983733593188, 0.7700682719676372, 0.8166805647905852, 0.8704235629373738, 0.9320844274026299, 1.0025562528802818, 1.0828447887104808, 1.1740743313260145, 1.2774922015142258, 1.3944710847153687, 1.526508367709278, 1.6752214574521316, 1.8423379279483998, 2.0296792231918985, 2.23913656684562, 2.4726377149578362, 2.732103262521831, 3.0193914059633293, 3.33623039928575, 3.684138445688447, 4.064331455336995, 4.477619977269355, 4.924297664864711, 5.404024822636186, 5.915711843352122, 6.457408586357564, 7.026206851610438, 7.618163929926244, 8.22825560896268, 8.850366842894767, 9.47732743266317, 10.100998440165018, 10.712412666976453, 11.301969441438631, 11.859680342752824, 12.37545860019239, 12.839441064737173, 13.242328228098918, 13.57572513351394, 13.832464516201071, 14.006893374788156, 14.09510552857041, 14.09510552857041, 14.006893374788156, 13.832464516201068, 13.57572513351394, 13.242328228098918, 12.839441064737173, 12.37545860019239, 11.85968034275282, 11.301969441438624, 10.712412666976453, 10.100998440165018, 9.477327432663168, 8.850366842894763, 8.228255608962678, 7.618163929926244, 7.026206851610438, 6.457408586357563, 5.915711843352121, 5.404024822636185, 4.924297664864707, 4.477619977269355, 4.064331455336994, 3.684138445688446, 3.3362303992857485]

min2= 100
for i in range(len(concA)):
    if concA[i] < concB[i]:
        if concA[i] < min2:
            min2 = concA[i]
    if concB[i] < concA[i]:
        if concB[i] < min2:
            min2 = concB[i]
print(min2)

growth_rand_ideal = []
new_stress_array = []
cell_stress_array = [0.2, 0.3]
for i in range(len(cell_stress_array)):

    k = 1/cell_stress_array[i]
    print(k)
    new_stress_array.append(cell_stress_array[i])
    sum = 0.0
    for j in range(len(concA)):
        if concA[j] < concB[j]:
            sum = sum + math.log2((2*concA[j]*k-5)/(2.5*5))
        if concB[j] <= concA[j]:
            sum = sum + math.log2((2*concB[j]*k-5)/(2.5*5))
    growth_rand_ideal.append(sum/len(concA))
rand_growth_max_vel = [[0.9252069084590882, 0.8712600813742263, 0.8134326417674153, 0.6910802430485695, 0.5723618543281704, 0.45076421332325745, 0.32850057785834924, 0.256128699242184, 0.1932285634090459, 0.13093866365610698]]
rand_growth_full_rand = [[0.9889839844468531, 0.9488128778370464, 0.9150354168911236, 0.8453156608041006, 0.7799261069661177, 0.7030974511686297, 0.6243624202897259, 0.569080418315035, 0.5049854293841277, 0.4404169555470908]]
rand_growth_full_rand = [[0.963972851654404, 0.9684625219526671, 0.9623641442435001, 0.968870039947349, 0.9662601120508542, 0.948894917263261, 0.9285936538560544, 0.9113108667106649, 0.8967393087454962, 0.8849589523929242]]
rand_growth_full_rand = [[0.5107197238743667, 0.31693900921524554, 0.17737343758894328]]
plt.plot(cell_stress_array, growth_rand_ideal, label = "ideal rand growth rate")
#plt.plot(cell_stress_array, rand_growth_full_rand[0], label = "rand growth rate full")
plt.legend()
plt.grid()
plt.show()
#plt.plot(cell_stress_array, rand_growth_full_rand, label = "rand growth rate full")
